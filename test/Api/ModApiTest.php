<?php
/**
 * ModApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kleister OpenAPI
 *
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Kleister\Test\Api;

use \Kleister\Configuration;
use \Kleister\ApiException;
use \Kleister\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ModApiTest Class Doc Comment
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for attachModToTeam
     *
     * Attach a team to mod.
     *
     */
    public function testAttachModToTeam()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for attachModToUser
     *
     * Attach a user to mod.
     *
     */
    public function testAttachModToUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for attachVersionToBuild
     *
     * Attach a build to a version.
     *
     */
    public function testAttachVersionToBuild()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createMod
     *
     * Create a new mod.
     *
     */
    public function testCreateMod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createVersion
     *
     * Create a new version for a mod.
     *
     */
    public function testCreateVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteMod
     *
     * Delete a specific mod.
     *
     */
    public function testDeleteMod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteModFromTeam
     *
     * Unlink a team from mod.
     *
     */
    public function testDeleteModFromTeam()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteModFromUser
     *
     * Unlink a user from mod.
     *
     */
    public function testDeleteModFromUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteVersion
     *
     * Delete a specific version for a mod.
     *
     */
    public function testDeleteVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteVersionFromBuild
     *
     * Unlink a build from a version.
     *
     */
    public function testDeleteVersionFromBuild()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listModTeams
     *
     * Fetch all teams attached to mod.
     *
     */
    public function testListModTeams()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listModUsers
     *
     * Fetch all users attached to mod.
     *
     */
    public function testListModUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listMods
     *
     * Fetch all available mods.
     *
     */
    public function testListMods()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVersionBuilds
     *
     * Fetch all builds attached to version.
     *
     */
    public function testListVersionBuilds()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listVersions
     *
     * Fetch all available versions for a mod.
     *
     */
    public function testListVersions()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for permitModTeam
     *
     * Update team perms for mod.
     *
     */
    public function testPermitModTeam()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for permitModUser
     *
     * Update user perms for mod.
     *
     */
    public function testPermitModUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for showMod
     *
     * Fetch a specific mod.
     *
     */
    public function testShowMod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for showVersion
     *
     * Fetch a specific version for a mod.
     *
     */
    public function testShowVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateMod
     *
     * Update a specific mod.
     *
     */
    public function testUpdateMod()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateVersion
     *
     * Update a specific version for a mod.
     *
     */
    public function testUpdateVersion()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
