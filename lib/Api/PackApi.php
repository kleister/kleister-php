<?php
/**
 * PackApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kleister OpenAPI
 *
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Contact: kleister@webhippie.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.17.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kleister\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Kleister\ApiException;
use Kleister\Configuration;
use Kleister\FormDataProcessor;
use Kleister\HeaderSelector;
use Kleister\ObjectSerializer;

/**
 * PackApi Class Doc Comment
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PackApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'attachBuildToVersion' => [
            'application/json',
        ],
        'attachPackToGroup' => [
            'application/json',
        ],
        'attachPackToUser' => [
            'application/json',
        ],
        'createBuild' => [
            'application/json',
        ],
        'createPack' => [
            'application/json',
        ],
        'deleteBuild' => [
            'application/json',
        ],
        'deleteBuildFromVersion' => [
            'application/json',
        ],
        'deletePack' => [
            'application/json',
        ],
        'deletePackFromGroup' => [
            'application/json',
        ],
        'deletePackFromUser' => [
            'application/json',
        ],
        'listBuildVersions' => [
            'application/json',
        ],
        'listBuilds' => [
            'application/json',
        ],
        'listPackGroups' => [
            'application/json',
        ],
        'listPackUsers' => [
            'application/json',
        ],
        'listPacks' => [
            'application/json',
        ],
        'permitPackGroup' => [
            'application/json',
        ],
        'permitPackUser' => [
            'application/json',
        ],
        'showBuild' => [
            'application/json',
        ],
        'showPack' => [
            'application/json',
        ],
        'updateBuild' => [
            'application/json',
        ],
        'updatePack' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation attachBuildToVersion
     *
     * Attach a version to a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachBuildToVersion'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function attachBuildToVersion($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['attachBuildToVersion'][0])
    {
        list($response) = $this->attachBuildToVersionWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, $contentType);
        return $response;
    }

    /**
     * Operation attachBuildToVersionWithHttpInfo
     *
     * Attach a version to a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachBuildToVersion'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachBuildToVersionWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['attachBuildToVersion'][0])
    {
        $request = $this->attachBuildToVersionRequest($packId, $buildId, $attachBuildToVersionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation attachBuildToVersionAsync
     *
     * Attach a version to a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachBuildToVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachBuildToVersionAsync($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['attachBuildToVersion'][0])
    {
        return $this->attachBuildToVersionAsyncWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachBuildToVersionAsyncWithHttpInfo
     *
     * Attach a version to a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachBuildToVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachBuildToVersionAsyncWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['attachBuildToVersion'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->attachBuildToVersionRequest($packId, $buildId, $attachBuildToVersionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachBuildToVersion'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachBuildToVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachBuildToVersionRequest($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['attachBuildToVersion'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling attachBuildToVersion'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling attachBuildToVersion'
            );
        }

        // verify the required parameter 'attachBuildToVersionRequest' is set
        if ($attachBuildToVersionRequest === null || (is_array($attachBuildToVersionRequest) && count($attachBuildToVersionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachBuildToVersionRequest when calling attachBuildToVersion'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds/{build_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($attachBuildToVersionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($attachBuildToVersionRequest));
            } else {
                $httpBody = $attachBuildToVersionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attachPackToGroup
     *
     * Attach a group to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function attachPackToGroup($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['attachPackToGroup'][0])
    {
        list($response) = $this->attachPackToGroupWithHttpInfo($packId, $permitPackGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation attachPackToGroupWithHttpInfo
     *
     * Attach a group to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachPackToGroupWithHttpInfo($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['attachPackToGroup'][0])
    {
        $request = $this->attachPackToGroupRequest($packId, $permitPackGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation attachPackToGroupAsync
     *
     * Attach a group to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachPackToGroupAsync($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['attachPackToGroup'][0])
    {
        return $this->attachPackToGroupAsyncWithHttpInfo($packId, $permitPackGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachPackToGroupAsyncWithHttpInfo
     *
     * Attach a group to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachPackToGroupAsyncWithHttpInfo($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['attachPackToGroup'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->attachPackToGroupRequest($packId, $permitPackGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachPackToGroup'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachPackToGroupRequest($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['attachPackToGroup'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling attachPackToGroup'
            );
        }

        // verify the required parameter 'permitPackGroupRequest' is set
        if ($permitPackGroupRequest === null || (is_array($permitPackGroupRequest) && count($permitPackGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permitPackGroupRequest when calling attachPackToGroup'
            );
        }


        $resourcePath = '/packs/{pack_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permitPackGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permitPackGroupRequest));
            } else {
                $httpBody = $permitPackGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation attachPackToUser
     *
     * Attach a user to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function attachPackToUser($packId, $permitPackUserRequest, string $contentType = self::contentTypes['attachPackToUser'][0])
    {
        list($response) = $this->attachPackToUserWithHttpInfo($packId, $permitPackUserRequest, $contentType);
        return $response;
    }

    /**
     * Operation attachPackToUserWithHttpInfo
     *
     * Attach a user to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function attachPackToUserWithHttpInfo($packId, $permitPackUserRequest, string $contentType = self::contentTypes['attachPackToUser'][0])
    {
        $request = $this->attachPackToUserRequest($packId, $permitPackUserRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation attachPackToUserAsync
     *
     * Attach a user to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachPackToUserAsync($packId, $permitPackUserRequest, string $contentType = self::contentTypes['attachPackToUser'][0])
    {
        return $this->attachPackToUserAsyncWithHttpInfo($packId, $permitPackUserRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation attachPackToUserAsyncWithHttpInfo
     *
     * Attach a user to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function attachPackToUserAsyncWithHttpInfo($packId, $permitPackUserRequest, string $contentType = self::contentTypes['attachPackToUser'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->attachPackToUserRequest($packId, $permitPackUserRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'attachPackToUser'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['attachPackToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function attachPackToUserRequest($packId, $permitPackUserRequest, string $contentType = self::contentTypes['attachPackToUser'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling attachPackToUser'
            );
        }

        // verify the required parameter 'permitPackUserRequest' is set
        if ($permitPackUserRequest === null || (is_array($permitPackUserRequest) && count($permitPackUserRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permitPackUserRequest when calling attachPackToUser'
            );
        }


        $resourcePath = '/packs/{pack_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permitPackUserRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permitPackUserRequest));
            } else {
                $httpBody = $permitPackUserRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBuild
     *
     * Create a new build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function createBuild($packId, $createBuildRequest, string $contentType = self::contentTypes['createBuild'][0])
    {
        list($response) = $this->createBuildWithHttpInfo($packId, $createBuildRequest, $contentType);
        return $response;
    }

    /**
     * Operation createBuildWithHttpInfo
     *
     * Create a new build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBuildWithHttpInfo($packId, $createBuildRequest, string $contentType = self::contentTypes['createBuild'][0])
    {
        $request = $this->createBuildRequest($packId, $createBuildRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Build',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Build',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createBuildAsync
     *
     * Create a new build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildAsync($packId, $createBuildRequest, string $contentType = self::contentTypes['createBuild'][0])
    {
        return $this->createBuildAsyncWithHttpInfo($packId, $createBuildRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBuildAsyncWithHttpInfo
     *
     * Create a new build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBuildAsyncWithHttpInfo($packId, $createBuildRequest, string $contentType = self::contentTypes['createBuild'][0])
    {
        $returnType = '\Kleister\Model\Build';
        $request = $this->createBuildRequest($packId, $createBuildRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBuild'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBuildRequest($packId, $createBuildRequest, string $contentType = self::contentTypes['createBuild'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling createBuild'
            );
        }

        // verify the required parameter 'createBuildRequest' is set
        if ($createBuildRequest === null || (is_array($createBuildRequest) && count($createBuildRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createBuildRequest when calling createBuild'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createBuildRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createBuildRequest));
            } else {
                $httpBody = $createBuildRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPack
     *
     * Create a new pack
     *
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function createPack($createPackRequest, string $contentType = self::contentTypes['createPack'][0])
    {
        list($response) = $this->createPackWithHttpInfo($createPackRequest, $contentType);
        return $response;
    }

    /**
     * Operation createPackWithHttpInfo
     *
     * Create a new pack
     *
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPackWithHttpInfo($createPackRequest, string $contentType = self::contentTypes['createPack'][0])
    {
        $request = $this->createPackRequest($createPackRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Pack',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Pack',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Pack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createPackAsync
     *
     * Create a new pack
     *
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPackAsync($createPackRequest, string $contentType = self::contentTypes['createPack'][0])
    {
        return $this->createPackAsyncWithHttpInfo($createPackRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPackAsyncWithHttpInfo
     *
     * Create a new pack
     *
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPackAsyncWithHttpInfo($createPackRequest, string $contentType = self::contentTypes['createPack'][0])
    {
        $returnType = '\Kleister\Model\Pack';
        $request = $this->createPackRequest($createPackRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPack'
     *
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPackRequest($createPackRequest, string $contentType = self::contentTypes['createPack'][0])
    {

        // verify the required parameter 'createPackRequest' is set
        if ($createPackRequest === null || (is_array($createPackRequest) && count($createPackRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createPackRequest when calling createPack'
            );
        }


        $resourcePath = '/packs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createPackRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createPackRequest));
            } else {
                $httpBody = $createPackRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuild
     *
     * Delete a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function deleteBuild($packId, $buildId, string $contentType = self::contentTypes['deleteBuild'][0])
    {
        list($response) = $this->deleteBuildWithHttpInfo($packId, $buildId, $contentType);
        return $response;
    }

    /**
     * Operation deleteBuildWithHttpInfo
     *
     * Delete a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBuildWithHttpInfo($packId, $buildId, string $contentType = self::contentTypes['deleteBuild'][0])
    {
        $request = $this->deleteBuildRequest($packId, $buildId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteBuildAsync
     *
     * Delete a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildAsync($packId, $buildId, string $contentType = self::contentTypes['deleteBuild'][0])
    {
        return $this->deleteBuildAsyncWithHttpInfo($packId, $buildId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBuildAsyncWithHttpInfo
     *
     * Delete a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildAsyncWithHttpInfo($packId, $buildId, string $contentType = self::contentTypes['deleteBuild'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->deleteBuildRequest($packId, $buildId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuild'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBuildRequest($packId, $buildId, string $contentType = self::contentTypes['deleteBuild'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling deleteBuild'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling deleteBuild'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds/{build_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteBuildFromVersion
     *
     * Unlink a version from a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildFromVersion'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function deleteBuildFromVersion($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['deleteBuildFromVersion'][0])
    {
        list($response) = $this->deleteBuildFromVersionWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, $contentType);
        return $response;
    }

    /**
     * Operation deleteBuildFromVersionWithHttpInfo
     *
     * Unlink a version from a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildFromVersion'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBuildFromVersionWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['deleteBuildFromVersion'][0])
    {
        $request = $this->deleteBuildFromVersionRequest($packId, $buildId, $attachBuildToVersionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deleteBuildFromVersionAsync
     *
     * Unlink a version from a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildFromVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildFromVersionAsync($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['deleteBuildFromVersion'][0])
    {
        return $this->deleteBuildFromVersionAsyncWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteBuildFromVersionAsyncWithHttpInfo
     *
     * Unlink a version from a build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildFromVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteBuildFromVersionAsyncWithHttpInfo($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['deleteBuildFromVersion'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->deleteBuildFromVersionRequest($packId, $buildId, $attachBuildToVersionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteBuildFromVersion'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\AttachBuildToVersionRequest $attachBuildToVersionRequest The build version data to create or delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteBuildFromVersion'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteBuildFromVersionRequest($packId, $buildId, $attachBuildToVersionRequest, string $contentType = self::contentTypes['deleteBuildFromVersion'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling deleteBuildFromVersion'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling deleteBuildFromVersion'
            );
        }

        // verify the required parameter 'attachBuildToVersionRequest' is set
        if ($attachBuildToVersionRequest === null || (is_array($attachBuildToVersionRequest) && count($attachBuildToVersionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachBuildToVersionRequest when calling deleteBuildFromVersion'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds/{build_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($attachBuildToVersionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($attachBuildToVersionRequest));
            } else {
                $httpBody = $attachBuildToVersionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePack
     *
     * Delete a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function deletePack($packId, string $contentType = self::contentTypes['deletePack'][0])
    {
        list($response) = $this->deletePackWithHttpInfo($packId, $contentType);
        return $response;
    }

    /**
     * Operation deletePackWithHttpInfo
     *
     * Delete a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePackWithHttpInfo($packId, string $contentType = self::contentTypes['deletePack'][0])
    {
        $request = $this->deletePackRequest($packId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deletePackAsync
     *
     * Delete a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackAsync($packId, string $contentType = self::contentTypes['deletePack'][0])
    {
        return $this->deletePackAsyncWithHttpInfo($packId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePackAsyncWithHttpInfo
     *
     * Delete a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackAsyncWithHttpInfo($packId, string $contentType = self::contentTypes['deletePack'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->deletePackRequest($packId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePack'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePackRequest($packId, string $contentType = self::contentTypes['deletePack'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling deletePack'
            );
        }


        $resourcePath = '/packs/{pack_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePackFromGroup
     *
     * Unlink a group from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromGroupRequest $deletePackFromGroupRequest The pack group data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function deletePackFromGroup($packId, $deletePackFromGroupRequest, string $contentType = self::contentTypes['deletePackFromGroup'][0])
    {
        list($response) = $this->deletePackFromGroupWithHttpInfo($packId, $deletePackFromGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation deletePackFromGroupWithHttpInfo
     *
     * Unlink a group from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromGroupRequest $deletePackFromGroupRequest The pack group data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePackFromGroupWithHttpInfo($packId, $deletePackFromGroupRequest, string $contentType = self::contentTypes['deletePackFromGroup'][0])
    {
        $request = $this->deletePackFromGroupRequest($packId, $deletePackFromGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deletePackFromGroupAsync
     *
     * Unlink a group from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromGroupRequest $deletePackFromGroupRequest The pack group data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackFromGroupAsync($packId, $deletePackFromGroupRequest, string $contentType = self::contentTypes['deletePackFromGroup'][0])
    {
        return $this->deletePackFromGroupAsyncWithHttpInfo($packId, $deletePackFromGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePackFromGroupAsyncWithHttpInfo
     *
     * Unlink a group from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromGroupRequest $deletePackFromGroupRequest The pack group data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackFromGroupAsyncWithHttpInfo($packId, $deletePackFromGroupRequest, string $contentType = self::contentTypes['deletePackFromGroup'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->deletePackFromGroupRequest($packId, $deletePackFromGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePackFromGroup'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromGroupRequest $deletePackFromGroupRequest The pack group data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePackFromGroupRequest($packId, $deletePackFromGroupRequest, string $contentType = self::contentTypes['deletePackFromGroup'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling deletePackFromGroup'
            );
        }

        // verify the required parameter 'deletePackFromGroupRequest' is set
        if ($deletePackFromGroupRequest === null || (is_array($deletePackFromGroupRequest) && count($deletePackFromGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deletePackFromGroupRequest when calling deletePackFromGroup'
            );
        }


        $resourcePath = '/packs/{pack_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deletePackFromGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deletePackFromGroupRequest));
            } else {
                $httpBody = $deletePackFromGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePackFromUser
     *
     * Unlink a user from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromUserRequest $deletePackFromUserRequest The pack user data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function deletePackFromUser($packId, $deletePackFromUserRequest, string $contentType = self::contentTypes['deletePackFromUser'][0])
    {
        list($response) = $this->deletePackFromUserWithHttpInfo($packId, $deletePackFromUserRequest, $contentType);
        return $response;
    }

    /**
     * Operation deletePackFromUserWithHttpInfo
     *
     * Unlink a user from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromUserRequest $deletePackFromUserRequest The pack user data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePackFromUserWithHttpInfo($packId, $deletePackFromUserRequest, string $contentType = self::contentTypes['deletePackFromUser'][0])
    {
        $request = $this->deletePackFromUserRequest($packId, $deletePackFromUserRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation deletePackFromUserAsync
     *
     * Unlink a user from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromUserRequest $deletePackFromUserRequest The pack user data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackFromUserAsync($packId, $deletePackFromUserRequest, string $contentType = self::contentTypes['deletePackFromUser'][0])
    {
        return $this->deletePackFromUserAsyncWithHttpInfo($packId, $deletePackFromUserRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePackFromUserAsyncWithHttpInfo
     *
     * Unlink a user from pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromUserRequest $deletePackFromUserRequest The pack user data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePackFromUserAsyncWithHttpInfo($packId, $deletePackFromUserRequest, string $contentType = self::contentTypes['deletePackFromUser'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->deletePackFromUserRequest($packId, $deletePackFromUserRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePackFromUser'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\DeletePackFromUserRequest $deletePackFromUserRequest The pack user data to unlink (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePackFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePackFromUserRequest($packId, $deletePackFromUserRequest, string $contentType = self::contentTypes['deletePackFromUser'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling deletePackFromUser'
            );
        }

        // verify the required parameter 'deletePackFromUserRequest' is set
        if ($deletePackFromUserRequest === null || (is_array($deletePackFromUserRequest) && count($deletePackFromUserRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deletePackFromUserRequest when calling deletePackFromUser'
            );
        }


        $resourcePath = '/packs/{pack_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($deletePackFromUserRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($deletePackFromUserRequest));
            } else {
                $httpBody = $deletePackFromUserRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listBuildVersions
     *
     * Fetch all versions attached to build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuildVersions'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\ListBuildVersions200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function listBuildVersions($packId, $buildId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuildVersions'][0])
    {
        list($response) = $this->listBuildVersionsWithHttpInfo($packId, $buildId, $search, $sort, $order, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listBuildVersionsWithHttpInfo
     *
     * Fetch all versions attached to build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuildVersions'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\ListBuildVersions200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBuildVersionsWithHttpInfo($packId, $buildId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuildVersions'][0])
    {
        $request = $this->listBuildVersionsRequest($packId, $buildId, $search, $sort, $order, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\ListBuildVersions200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\ListBuildVersions200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\ListBuildVersions200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listBuildVersionsAsync
     *
     * Fetch all versions attached to build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuildVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBuildVersionsAsync($packId, $buildId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuildVersions'][0])
    {
        return $this->listBuildVersionsAsyncWithHttpInfo($packId, $buildId, $search, $sort, $order, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listBuildVersionsAsyncWithHttpInfo
     *
     * Fetch all versions attached to build
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuildVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBuildVersionsAsyncWithHttpInfo($packId, $buildId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuildVersions'][0])
    {
        $returnType = '\Kleister\Model\ListBuildVersions200Response';
        $request = $this->listBuildVersionsRequest($packId, $buildId, $search, $sort, $order, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listBuildVersions'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuildVersions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listBuildVersionsRequest($packId, $buildId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuildVersions'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling listBuildVersions'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling listBuildVersions'
            );
        }







        $resourcePath = '/packs/{pack_id}/builds/{build_id}/versions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listBuilds
     *
     * Fetch all available builds for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuilds'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\ListBuilds200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function listBuilds($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuilds'][0])
    {
        list($response) = $this->listBuildsWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listBuildsWithHttpInfo
     *
     * Fetch all available builds for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuilds'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\ListBuilds200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function listBuildsWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuilds'][0])
    {
        $request = $this->listBuildsRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\ListBuilds200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\ListBuilds200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\ListBuilds200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listBuildsAsync
     *
     * Fetch all available builds for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBuildsAsync($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuilds'][0])
    {
        return $this->listBuildsAsyncWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listBuildsAsyncWithHttpInfo
     *
     * Fetch all available builds for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listBuildsAsyncWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuilds'][0])
    {
        $returnType = '\Kleister\Model\ListBuilds200Response';
        $request = $this->listBuildsRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listBuilds'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listBuilds'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listBuildsRequest($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listBuilds'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling listBuilds'
            );
        }







        $resourcePath = '/packs/{pack_id}/builds';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackGroups
     *
     * Fetch all groups attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackGroups'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\ListPackGroups200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function listPackGroups($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackGroups'][0])
    {
        list($response) = $this->listPackGroupsWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listPackGroupsWithHttpInfo
     *
     * Fetch all groups attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackGroups'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\ListPackGroups200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPackGroupsWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackGroups'][0])
    {
        $request = $this->listPackGroupsRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\ListPackGroups200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\ListPackGroups200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\ListPackGroups200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPackGroupsAsync
     *
     * Fetch all groups attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackGroupsAsync($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackGroups'][0])
    {
        return $this->listPackGroupsAsyncWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackGroupsAsyncWithHttpInfo
     *
     * Fetch all groups attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackGroupsAsyncWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackGroups'][0])
    {
        $returnType = '\Kleister\Model\ListPackGroups200Response';
        $request = $this->listPackGroupsRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackGroups'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPackGroupsRequest($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackGroups'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling listPackGroups'
            );
        }







        $resourcePath = '/packs/{pack_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPackUsers
     *
     * Fetch all users attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackUsers'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\ListPackUsers200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function listPackUsers($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackUsers'][0])
    {
        list($response) = $this->listPackUsersWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listPackUsersWithHttpInfo
     *
     * Fetch all users attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackUsers'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\ListPackUsers200Response|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPackUsersWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackUsers'][0])
    {
        $request = $this->listPackUsersRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\ListPackUsers200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\ListPackUsers200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\ListPackUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPackUsersAsync
     *
     * Fetch all users attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackUsersAsync($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackUsers'][0])
    {
        return $this->listPackUsersAsyncWithHttpInfo($packId, $search, $sort, $order, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPackUsersAsyncWithHttpInfo
     *
     * Fetch all users attached to pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPackUsersAsyncWithHttpInfo($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackUsers'][0])
    {
        $returnType = '\Kleister\Model\ListPackUsers200Response';
        $request = $this->listPackUsersRequest($packId, $search, $sort, $order, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPackUsers'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPackUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPackUsersRequest($packId, $search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPackUsers'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling listPackUsers'
            );
        }







        $resourcePath = '/packs/{pack_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPacks
     *
     * Fetch all available packs
     *
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPacks'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\ListPacks200Response|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function listPacks($search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPacks'][0])
    {
        list($response) = $this->listPacksWithHttpInfo($search, $sort, $order, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listPacksWithHttpInfo
     *
     * Fetch all available packs
     *
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPacks'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\ListPacks200Response|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPacksWithHttpInfo($search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPacks'][0])
    {
        $request = $this->listPacksRequest($search, $sort, $order, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\ListPacks200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\ListPacks200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\ListPacks200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listPacksAsync
     *
     * Fetch all available packs
     *
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPacksAsync($search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPacks'][0])
    {
        return $this->listPacksAsyncWithHttpInfo($search, $sort, $order, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPacksAsyncWithHttpInfo
     *
     * Fetch all available packs
     *
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPacksAsyncWithHttpInfo($search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPacks'][0])
    {
        $returnType = '\Kleister\Model\ListPacks200Response';
        $request = $this->listPacksRequest($search, $sort, $order, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPacks'
     *
     * @param  string|null $search Search query (optional)
     * @param  string|null $sort Sorting column (optional)
     * @param  string|null $order Sorting order (optional, default to 'asc')
     * @param  int|null $limit Paging limit (optional, default to 100)
     * @param  int|null $offset Paging offset (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPacks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPacksRequest($search = null, $sort = null, $order = 'asc', $limit = 100, $offset = 0, string $contentType = self::contentTypes['listPacks'][0])
    {







        $resourcePath = '/packs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation permitPackGroup
     *
     * Update group perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function permitPackGroup($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['permitPackGroup'][0])
    {
        list($response) = $this->permitPackGroupWithHttpInfo($packId, $permitPackGroupRequest, $contentType);
        return $response;
    }

    /**
     * Operation permitPackGroupWithHttpInfo
     *
     * Update group perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackGroup'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function permitPackGroupWithHttpInfo($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['permitPackGroup'][0])
    {
        $request = $this->permitPackGroupRequest($packId, $permitPackGroupRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation permitPackGroupAsync
     *
     * Update group perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitPackGroupAsync($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['permitPackGroup'][0])
    {
        return $this->permitPackGroupAsyncWithHttpInfo($packId, $permitPackGroupRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation permitPackGroupAsyncWithHttpInfo
     *
     * Update group perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitPackGroupAsyncWithHttpInfo($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['permitPackGroup'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->permitPackGroupRequest($packId, $permitPackGroupRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'permitPackGroup'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackGroupRequest $permitPackGroupRequest The pack group data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function permitPackGroupRequest($packId, $permitPackGroupRequest, string $contentType = self::contentTypes['permitPackGroup'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling permitPackGroup'
            );
        }

        // verify the required parameter 'permitPackGroupRequest' is set
        if ($permitPackGroupRequest === null || (is_array($permitPackGroupRequest) && count($permitPackGroupRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permitPackGroupRequest when calling permitPackGroup'
            );
        }


        $resourcePath = '/packs/{pack_id}/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permitPackGroupRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permitPackGroupRequest));
            } else {
                $httpBody = $permitPackGroupRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation permitPackUser
     *
     * Update user perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function permitPackUser($packId, $permitPackUserRequest, string $contentType = self::contentTypes['permitPackUser'][0])
    {
        list($response) = $this->permitPackUserWithHttpInfo($packId, $permitPackUserRequest, $contentType);
        return $response;
    }

    /**
     * Operation permitPackUserWithHttpInfo
     *
     * Update user perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackUser'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function permitPackUserWithHttpInfo($packId, $permitPackUserRequest, string $contentType = self::contentTypes['permitPackUser'][0])
    {
        $request = $this->permitPackUserRequest($packId, $permitPackUserRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 412:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Notification',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation permitPackUserAsync
     *
     * Update user perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitPackUserAsync($packId, $permitPackUserRequest, string $contentType = self::contentTypes['permitPackUser'][0])
    {
        return $this->permitPackUserAsyncWithHttpInfo($packId, $permitPackUserRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation permitPackUserAsyncWithHttpInfo
     *
     * Update user perms for pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function permitPackUserAsyncWithHttpInfo($packId, $permitPackUserRequest, string $contentType = self::contentTypes['permitPackUser'][0])
    {
        $returnType = '\Kleister\Model\Notification';
        $request = $this->permitPackUserRequest($packId, $permitPackUserRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'permitPackUser'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\PermitPackUserRequest $permitPackUserRequest The pack user data to permit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['permitPackUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function permitPackUserRequest($packId, $permitPackUserRequest, string $contentType = self::contentTypes['permitPackUser'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling permitPackUser'
            );
        }

        // verify the required parameter 'permitPackUserRequest' is set
        if ($permitPackUserRequest === null || (is_array($permitPackUserRequest) && count($permitPackUserRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $permitPackUserRequest when calling permitPackUser'
            );
        }


        $resourcePath = '/packs/{pack_id}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($permitPackUserRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($permitPackUserRequest));
            } else {
                $httpBody = $permitPackUserRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showBuild
     *
     * Fetch a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function showBuild($packId, $buildId, string $contentType = self::contentTypes['showBuild'][0])
    {
        list($response) = $this->showBuildWithHttpInfo($packId, $buildId, $contentType);
        return $response;
    }

    /**
     * Operation showBuildWithHttpInfo
     *
     * Fetch a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function showBuildWithHttpInfo($packId, $buildId, string $contentType = self::contentTypes['showBuild'][0])
    {
        $request = $this->showBuildRequest($packId, $buildId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Build',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Build',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation showBuildAsync
     *
     * Fetch a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showBuildAsync($packId, $buildId, string $contentType = self::contentTypes['showBuild'][0])
    {
        return $this->showBuildAsyncWithHttpInfo($packId, $buildId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showBuildAsyncWithHttpInfo
     *
     * Fetch a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showBuildAsyncWithHttpInfo($packId, $buildId, string $contentType = self::contentTypes['showBuild'][0])
    {
        $returnType = '\Kleister\Model\Build';
        $request = $this->showBuildRequest($packId, $buildId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showBuild'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showBuildRequest($packId, $buildId, string $contentType = self::contentTypes['showBuild'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling showBuild'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling showBuild'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds/{build_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation showPack
     *
     * Fetch a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function showPack($packId, string $contentType = self::contentTypes['showPack'][0])
    {
        list($response) = $this->showPackWithHttpInfo($packId, $contentType);
        return $response;
    }

    /**
     * Operation showPackWithHttpInfo
     *
     * Fetch a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function showPackWithHttpInfo($packId, string $contentType = self::contentTypes['showPack'][0])
    {
        $request = $this->showPackRequest($packId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Pack',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Pack',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Pack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation showPackAsync
     *
     * Fetch a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showPackAsync($packId, string $contentType = self::contentTypes['showPack'][0])
    {
        return $this->showPackAsyncWithHttpInfo($packId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation showPackAsyncWithHttpInfo
     *
     * Fetch a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function showPackAsyncWithHttpInfo($packId, string $contentType = self::contentTypes['showPack'][0])
    {
        $returnType = '\Kleister\Model\Pack';
        $request = $this->showPackRequest($packId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'showPack'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['showPack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function showPackRequest($packId, string $contentType = self::contentTypes['showPack'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling showPack'
            );
        }


        $resourcePath = '/packs/{pack_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateBuild
     *
     * Update a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function updateBuild($packId, $buildId, $createBuildRequest, string $contentType = self::contentTypes['updateBuild'][0])
    {
        list($response) = $this->updateBuildWithHttpInfo($packId, $buildId, $createBuildRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateBuildWithHttpInfo
     *
     * Update a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuild'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Build|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBuildWithHttpInfo($packId, $buildId, $createBuildRequest, string $contentType = self::contentTypes['updateBuild'][0])
    {
        $request = $this->updateBuildRequest($packId, $buildId, $createBuildRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Build',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Build',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Build',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateBuildAsync
     *
     * Update a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildAsync($packId, $buildId, $createBuildRequest, string $contentType = self::contentTypes['updateBuild'][0])
    {
        return $this->updateBuildAsyncWithHttpInfo($packId, $buildId, $createBuildRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateBuildAsyncWithHttpInfo
     *
     * Update a specific build for a pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateBuildAsyncWithHttpInfo($packId, $buildId, $createBuildRequest, string $contentType = self::contentTypes['updateBuild'][0])
    {
        $returnType = '\Kleister\Model\Build';
        $request = $this->updateBuildRequest($packId, $buildId, $createBuildRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateBuild'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  string $buildId A build identifier or slug (required)
     * @param  \Kleister\Model\CreateBuildRequest $createBuildRequest The build data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateBuild'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateBuildRequest($packId, $buildId, $createBuildRequest, string $contentType = self::contentTypes['updateBuild'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling updateBuild'
            );
        }

        // verify the required parameter 'buildId' is set
        if ($buildId === null || (is_array($buildId) && count($buildId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $buildId when calling updateBuild'
            );
        }

        // verify the required parameter 'createBuildRequest' is set
        if ($createBuildRequest === null || (is_array($createBuildRequest) && count($createBuildRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createBuildRequest when calling updateBuild'
            );
        }


        $resourcePath = '/packs/{pack_id}/builds/{build_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }
        // path params
        if ($buildId !== null) {
            $resourcePath = str_replace(
                '{' . 'build_id' . '}',
                ObjectSerializer::toPathValue($buildId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createBuildRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createBuildRequest));
            } else {
                $httpBody = $createBuildRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePack
     *
     * Update a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification
     */
    public function updatePack($packId, $createPackRequest, string $contentType = self::contentTypes['updatePack'][0])
    {
        list($response) = $this->updatePackWithHttpInfo($packId, $createPackRequest, $contentType);
        return $response;
    }

    /**
     * Operation updatePackWithHttpInfo
     *
     * Update a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePack'] to see the possible values for this operation
     *
     * @throws \Kleister\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Kleister\Model\Pack|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification|\Kleister\Model\Notification, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePackWithHttpInfo($packId, $createPackRequest, string $contentType = self::contentTypes['updatePack'][0])
    {
        $request = $this->updatePackRequest($packId, $createPackRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Pack',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\Kleister\Model\Notification',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Kleister\Model\Pack',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Pack',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kleister\Model\Notification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updatePackAsync
     *
     * Update a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePackAsync($packId, $createPackRequest, string $contentType = self::contentTypes['updatePack'][0])
    {
        return $this->updatePackAsyncWithHttpInfo($packId, $createPackRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePackAsyncWithHttpInfo
     *
     * Update a specific pack
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePackAsyncWithHttpInfo($packId, $createPackRequest, string $contentType = self::contentTypes['updatePack'][0])
    {
        $returnType = '\Kleister\Model\Pack';
        $request = $this->updatePackRequest($packId, $createPackRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePack'
     *
     * @param  string $packId A pack identifier or slug (required)
     * @param  \Kleister\Model\CreatePackRequest $createPackRequest The pack data to update (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePack'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePackRequest($packId, $createPackRequest, string $contentType = self::contentTypes['updatePack'][0])
    {

        // verify the required parameter 'packId' is set
        if ($packId === null || (is_array($packId) && count($packId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $packId when calling updatePack'
            );
        }

        // verify the required parameter 'createPackRequest' is set
        if ($createPackRequest === null || (is_array($createPackRequest) && count($createPackRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $createPackRequest when calling updatePack'
            );
        }


        $resourcePath = '/packs/{pack_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($packId !== null) {
            $resourcePath = str_replace(
                '{' . 'pack_id' . '}',
                ObjectSerializer::toPathValue($packId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($createPackRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($createPackRequest));
            } else {
                $httpBody = $createPackRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }
        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        if ($this->config->getCertFile()) {
            $options[RequestOptions::CERT] = $this->config->getCertFile();
        }

        if ($this->config->getKeyFile()) {
            $options[RequestOptions::SSL_KEY] = $this->config->getKeyFile();
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
