<?php
/**
 * Build
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kleister OpenAPI
 *
 * API definition for Kleister, manage mod packs for Minecraft
 *
 * The version of the OpenAPI document: 1.0.0-alpha1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Kleister\Model;

use \ArrayAccess;
use \Kleister\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @package  Kleister
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Build implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'packId' => 'string',
        'minecraftId' => 'string',
        'forgeId' => 'string',
        'slug' => 'string',
        'name' => 'string',
        'minJava' => 'string',
        'minMemory' => 'string',
        'published' => 'bool',
        'hidden' => 'bool',
        'private' => 'bool',
        'public' => 'bool',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'packId' => 'uuid',
        'minecraftId' => 'uuid',
        'forgeId' => 'uuid',
        'slug' => null,
        'name' => null,
        'minJava' => null,
        'minMemory' => null,
        'published' => null,
        'hidden' => null,
        'private' => null,
        'public' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'packId' => 'pack_id',
        'minecraftId' => 'minecraft_id',
        'forgeId' => 'forge_id',
        'slug' => 'slug',
        'name' => 'name',
        'minJava' => 'min_java',
        'minMemory' => 'min_memory',
        'published' => 'published',
        'hidden' => 'hidden',
        'private' => 'private',
        'public' => 'public',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'packId' => 'setPackId',
        'minecraftId' => 'setMinecraftId',
        'forgeId' => 'setForgeId',
        'slug' => 'setSlug',
        'name' => 'setName',
        'minJava' => 'setMinJava',
        'minMemory' => 'setMinMemory',
        'published' => 'setPublished',
        'hidden' => 'setHidden',
        'private' => 'setPrivate',
        'public' => 'setPublic',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'packId' => 'getPackId',
        'minecraftId' => 'getMinecraftId',
        'forgeId' => 'getForgeId',
        'slug' => 'getSlug',
        'name' => 'getName',
        'minJava' => 'getMinJava',
        'minMemory' => 'getMinMemory',
        'published' => 'getPublished',
        'hidden' => 'getHidden',
        'private' => 'getPrivate',
        'public' => 'getPublic',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['packId'] = $data['packId'] ?? null;
        $this->container['minecraftId'] = $data['minecraftId'] ?? null;
        $this->container['forgeId'] = $data['forgeId'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['minJava'] = $data['minJava'] ?? null;
        $this->container['minMemory'] = $data['minMemory'] ?? null;
        $this->container['published'] = $data['published'] ?? null;
        $this->container['hidden'] = $data['hidden'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['public'] = $data['public'] ?? null;
        $this->container['createdAt'] = $data['createdAt'] ?? null;
        $this->container['updatedAt'] = $data['updatedAt'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['packId'] === null) {
            $invalidProperties[] = "'packId' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets packId
     *
     * @return string
     */
    public function getPackId()
    {
        return $this->container['packId'];
    }

    /**
     * Sets packId
     *
     * @param string $packId packId
     *
     * @return self
     */
    public function setPackId($packId)
    {
        $this->container['packId'] = $packId;

        return $this;
    }

    /**
     * Gets minecraftId
     *
     * @return string|null
     */
    public function getMinecraftId()
    {
        return $this->container['minecraftId'];
    }

    /**
     * Sets minecraftId
     *
     * @param string|null $minecraftId minecraftId
     *
     * @return self
     */
    public function setMinecraftId($minecraftId)
    {
        $this->container['minecraftId'] = $minecraftId;

        return $this;
    }

    /**
     * Gets forgeId
     *
     * @return string|null
     */
    public function getForgeId()
    {
        return $this->container['forgeId'];
    }

    /**
     * Sets forgeId
     *
     * @param string|null $forgeId forgeId
     *
     * @return self
     */
    public function setForgeId($forgeId)
    {
        $this->container['forgeId'] = $forgeId;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets minJava
     *
     * @return string|null
     */
    public function getMinJava()
    {
        return $this->container['minJava'];
    }

    /**
     * Sets minJava
     *
     * @param string|null $minJava minJava
     *
     * @return self
     */
    public function setMinJava($minJava)
    {
        $this->container['minJava'] = $minJava;

        return $this;
    }

    /**
     * Gets minMemory
     *
     * @return string|null
     */
    public function getMinMemory()
    {
        return $this->container['minMemory'];
    }

    /**
     * Sets minMemory
     *
     * @param string|null $minMemory minMemory
     *
     * @return self
     */
    public function setMinMemory($minMemory)
    {
        $this->container['minMemory'] = $minMemory;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return bool|null
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param bool|null $hidden hidden
     *
     * @return self
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return self
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


